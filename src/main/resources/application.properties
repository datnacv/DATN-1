spring.application.name=AsmGD1
logging.pattern.console=${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %yellow(%-5level) %red([%thread]) %blue(%logger{255}) - %msg%n}
spring.datasource.url=jdbc:sqlserver://localhost;databaseName=ACVStore;trustServerCertificate=true;
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Cho phep dung .sql de tao bang va insert du lieu
# following need for creating tables
#script-based initialization is performed by default only for embedded databases (e.c H2),
#to always initialize a database using scripts, we'll have to use:
spring.jpa.generate-ddl=true
logging.level.net.ttddyy.dsproxy.listener=debug

# Cho phep dung dong thoi Hibernate va .sql de tao bang
#after Hibernate schema creation is performed then additionally schema.sql is read
# for any additional schema changes and data.sql is executed to populate the database.
#both Hibernate automatic schema generation in conjugation with script-based schema creation and data population,
# we'll have to use:
spring.jpa.defer-datasource-initialization=true

# following need for add data into table (not need in H2-Database)
#to always initialize a database using scripts, we'll have to use:
#embedded, never, always
#spring.sql.init.mode=always

#disable Hibernate automatic schema creation
#This will ensure that script-based initialization is performed using schema.sql and data.sql directly.
#update, create, create-drop, validate, none (5 options default=none for SQL Server, MySQL, ...; default = create-drop for H2-Database)
spring.jpa.hibernate.ddl-auto=none

#Show SQL statements on console
spring.jpa.show-sql=true

##format queries (on console)
#spring.jpa.properties.hibernate.format_sql=true

logging.level.org.hibernate.type=trace

#turn statistics on
#spring.jpa.properties.hibernate.generate_statistics=true

#customizing column name
#spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# OAuth2 Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google

# OAuth2 Facebook
spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.scope=public_profile,email
spring.security.oauth2.client.registration.facebook.redirect-uri={baseUrl}/login/oauth2/code/facebook

# Mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# PayOS
PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
PAYOS_API_KEY=${PAYOS_API_KEY}
PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}

# GHN API
ghn.api.url=https://online-gateway.ghn.vn/shiip/public-api
ghn.api.token=${GHN_API_TOKEN}
ghn.api.shop-id=${GHN_SHOP_ID}

logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG

spring.thymeleaf.cache=false
logging.level.com.example.AsmGD1=INFO

order.auto-complete-seconds=10000
// register-face.js
const video = document.getElementById("video");
const canvas = document.getElementById("overlay");
const resultDiv = document.getElementById("result");
const username = document.body.dataset.username;

let hasRegistered = false;
let stableCount = 0;
const STABLE_NEED = 5; // s·ªë khung h√¨nh ·ªïn ƒë·ªãnh li√™n ti·∫øp

// V·∫Ω v√≤ng tr√≤n h∆∞·ªõng d·∫´n ·ªü gi·ªØa khung
function drawGuide(ctx, W, H) {
    const r = Math.min(W, H) * 0.28; // b√°n k√≠nh v√≤ng h∆∞·ªõng d·∫´n
    const cx = W / 2, cy = H / 2;

    ctx.save();
    ctx.clearRect(0, 0, W, H);

    // che m·ªù ngo√†i v√≤ng (mask)
    ctx.fillStyle = "rgba(0,0,0,0.35)";
    ctx.beginPath();
    ctx.rect(0, 0, W, H);
    ctx.arc(cx, cy, r, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.fill("evenodd");

    // vi·ªÅn v√≤ng
    ctx.beginPath();
    ctx.arc(cx, cy, r, 0, Math.PI * 2);
    ctx.setLineDash([6, 8]);
    ctx.lineWidth = 3;
    ctx.strokeStyle = "rgba(255,255,255,.9)";
    ctx.shadowColor = "rgba(13,110,253,.9)";
    ctx.shadowBlur = 10;
    ctx.stroke();

    ctx.restore();
    return { cx, cy, r };
}

function showMsg(msg, type = "info") {
    const map = {
        info: "text-secondary",
        warn: "text-warning",
        error: "text-danger",
        ok: "text-success"
    };
    resultDiv.className = `${map[type] || map.info} mt-3 fw-medium`;
    resultDiv.textContent = msg;
}

Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
    faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
    faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
]).then(startVideo).catch(e=>{
    console.error(e);
    showMsg("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c m√¥ h√¨nh nh·∫≠n di·ªán.", "error");
});

function startVideo() {
    navigator.mediaDevices.getUserMedia({ video: { facingMode: "user" }, audio: false })
        .then(stream => {
            video.srcObject = stream;
            video.onloadedmetadata = () => {
                video.play();
                startDetectLoop();
            };
        })
        .catch(err => {
            console.error("Kh√¥ng th·ªÉ truy c·∫≠p camera", err);
            showMsg("‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera.", "error");
        });
}

function stopVideoStream() {
    const stream = video.srcObject;
    if (stream) {
        stream.getTracks().forEach(t => t.stop());
        video.srcObject = null;
    }
}

async function startDetectLoop() {
    const ctx = canvas.getContext("2d");
    const W = canvas.width = video.videoWidth || video.clientWidth;
    const H = canvas.height = video.videoHeight || video.clientHeight;

    const guide = drawGuide(ctx, W, H);

    const tick = async () => {
        if (hasRegistered) return;

        // lu√¥n v·∫Ω l·∫°i h∆∞·ªõng d·∫´n
        drawGuide(ctx, W, H);

        // ph√°t hi·ªán t·∫•t c·∫£ khu√¥n m·∫∑t
        const detections = await faceapi
            .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceDescriptors();

        // nhi·ªÅu m·∫∑t
        if (detections.length > 1) {
            stableCount = 0;
            showMsg("‚ö†Ô∏è C√≥ nhi·ªÅu khu√¥n m·∫∑t. Ch·ªâ m·ªôt ng∆∞·ªùi ƒë·ª©ng tr∆∞·ªõc camera.", "warn");
            requestAnimationFrame(tick);
            return;
        }

        // kh√¥ng c√≥ m·∫∑t
        if (detections.length === 0) {
            stableCount = 0;
            showMsg("üëã ƒê∆∞a m·∫∑t v√†o gi·ªØa v√≤ng tr√≤n.", "info");
            requestAnimationFrame(tick);
            return;
        }

        // ƒë√∫ng 1 m·∫∑t
        const det = detections[0];
        const box = det.detection.box;
        const faceCx = box.x + box.width / 2;
        const faceCy = box.y + box.height / 2;
        const faceR  = Math.max(box.width, box.height) / 2;

        // ƒëi·ªÅu ki·ªán n·∫±m g·ªçn trong v√≤ng tr√≤n
        const dist = Math.hypot(faceCx - guide.cx, faceCy - guide.cy);
        const inside = dist + faceR <= guide.r * 0.98; // ch·ª´a bi√™n 2%

        // r√†ng bu·ªôc g·∫ßn/xa h·ª£p l√Ω
        const minR = guide.r * 0.45; // qu√° nh·ªè => ƒë·ª©ng xa
        const maxR = guide.r * 0.80; // qu√° l·ªõn => ƒë·ª©ng g·∫ßn
        const sizeOk = faceR >= minR && faceR <= maxR;

        // v·∫Ω khung m·∫∑t
        ctx.beginPath();
        ctx.arc(faceCx, faceCy, faceR, 0, Math.PI * 2);
        ctx.lineWidth = 2;
        ctx.setLineDash([]);
        ctx.strokeStyle = inside && sizeOk ? "#22c55e" : "#ef4444";
        ctx.shadowColor = ctx.strokeStyle;
        ctx.shadowBlur = 12;
        ctx.stroke();

        if (!inside) {
            stableCount = 0;
            showMsg("üìç CƒÉn gi·ªØa khu√¥n m·∫∑t v√†o v√≤ng tr√≤n.", "warn");
            requestAnimationFrame(tick);
            return;
        }

        if (!sizeOk) {
            stableCount = 0;
            showMsg(faceR < minR ? "üîç Ti·∫øn g·∫ßn th√™m m·ªôt ch√∫t." : "‚ÜîÔ∏è L√πi ra xa m·ªôt ch√∫t.", "warn");
            requestAnimationFrame(tick);
            return;
        }

        // ·ªïn ƒë·ªãnh
        stableCount++;
        showMsg(`‚úÖ Gi·ªØ y√™n‚Ä¶ (${stableCount}/${STABLE_NEED})`, "ok");

        if (stableCount >= STABLE_NEED) {
            await registerDescriptor(det.descriptor);
            return; // d·ª´ng loop
        }

        requestAnimationFrame(tick);
    };

    requestAnimationFrame(tick);
}

async function registerDescriptor(descriptor) {
    try {
        hasRegistered = true;
        showMsg("üì§ ƒêang l∆∞u khu√¥n m·∫∑t‚Ä¶", "ok");

        const response = await fetch("/api/register-descriptor", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, descriptor: Array.from(descriptor) })
        });

        if (!response.ok) throw new Error("L·ªói khi l∆∞u descriptor");

        showMsg("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn trang‚Ä¶", "ok");
        stopVideoStream();
        setTimeout(() => (window.location.href = "/acvstore/verify-face"), 1200);
    } catch (e) {
        console.error(e);
        hasRegistered = false;
        showMsg("‚ùå Kh√¥ng th·ªÉ l∆∞u khu√¥n m·∫∑t. Th·ª≠ l·∫°i nh√©.", "error");
    }
}

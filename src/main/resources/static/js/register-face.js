// register-face.js
// Y√™u c·∫ßu: ƒë√£ include face-api.js v√† c√≥ th∆∞ m·ª•c /models ch·ª©a c√°c model c·∫ßn thi·∫øt

const video = document.getElementById("video");
const canvas = document.getElementById("overlay");
const resultDiv = document.getElementById("result");
const username = document.body.dataset.username;

// Tr·∫°ng th√°i
let hasRegistered = false;      // ƒë√£ g·ª≠i ƒëƒÉng k√Ω (ƒë·ªÉ tr√°nh g·ª≠i tr√πng)
let isDetecting = false;        // kho√° ch·ªìng l·ªánh detect song song
let detectTimer = null;         // interval handle

// Load model r·ªìi b·∫≠t camera
Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
    faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
    faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
])
    .then(startVideo)
    .catch((err) => {
        console.error("Kh√¥ng th·ªÉ load models:", err);
        showError("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥-ƒëun nh·∫≠n di·ªán khu√¥n m·∫∑t. Vui l√≤ng t·∫£i l·∫°i trang.");
    });

// M·ªü camera
function startVideo() {
    // iOS c·∫ßn playsinline ƒë·ªÉ kh√¥ng b·∫≠t full-screen
    video.setAttribute("playsinline", true);

    navigator.mediaDevices
        .getUserMedia({
            video: { facingMode: "user" }, // ∆∞u ti√™n camera tr∆∞·ªõc
            audio: false,
        })
        .then((stream) => {
            video.srcObject = stream;
            video.onloadedmetadata = () => {
                video.play().then(() => {
                    // ƒê·ªìng b·ªô canvas theo ƒë·ªô ph√¢n gi·∫£i th·ª±c c·ªßa stream
                    syncCanvasSize();
                    startFaceDetection();
                });
            };
        })
        .catch((err) => {
            console.error("Kh√¥ng th·ªÉ truy c·∫≠p camera:", err);
            const msg =
                err && err.name === "NotAllowedError"
                    ? "‚ùå Truy c·∫≠p camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng c·∫•p quy·ªÅn camera cho tr√¨nh duy·ªát."
                    : "‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera.";
            showError(msg);
        });
}

// D·ª´ng camera
function stopVideoStream() {
    const stream = video.srcObject;
    if (stream) {
        stream.getTracks().forEach((track) => track.stop());
        video.srcObject = null;
    }
}

// ƒê·ªìng b·ªô k√≠ch th∆∞·ªõc canvas theo k√≠ch th∆∞·ªõc th·ª±c c·ªßa video
function syncCanvasSize() {
    // video.videoWidth/videoHeight l√† k√≠ch th∆∞·ªõc th·ª±c c·ªßa feed
    const w = video.videoWidth || video.width || 640;
    const h = video.videoHeight || video.height || 480;

    // C·∫≠p nh·∫≠t thu·ªôc t√≠nh width/height c·ªßa <video> (tu·ª≥ UI d·ª± √°n)
    if (!video.width) video.width = w;
    if (!video.height) video.height = h;

    // G√°n k√≠ch th∆∞·ªõc canvas ƒë·ªÉ n√©t v·∫Ω kh·ªõp pixel
    canvas.width = w;
    canvas.height = h;

    // Match dimensions cho face-api v·∫Ω/scale ƒë√∫ng
    faceapi.matchDimensions(canvas, { width: w, height: h });
}

// Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp
function showSuccess(message) {
    resultDiv.textContent = message;
    resultDiv.className = "text-success fw-bold mt-3";
}
function showError(message) {
    resultDiv.textContent = message;
    resultDiv.className = "text-danger fw-bold mt-3";
}
function showInfo(message) {
    resultDiv.textContent = message;
    resultDiv.className = "text-primary fw-bold mt-3";
}

// V·∫Ω 1 v√≤ng tr√≤n quanh khu√¥n m·∫∑t
function drawCircle(box) {
    const ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const { x, y, width, height } = box;
    const centerX = x + width / 2;
    const centerY = y + height / 2;
    const radius = Math.max(width, height) / 2;

    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    ctx.lineWidth = 4;
    ctx.strokeStyle = "#0d6efd";
    ctx.shadowColor = "#0d6efd";
    ctx.shadowBlur = 20;
    ctx.stroke();
    ctx.shadowBlur = 0;
}

// V√≤ng l·∫∑p ph√°t hi·ªán
function startFaceDetection() {
    // N·∫øu ng∆∞·ªùi d√πng ƒë·ªïi k√≠ch c·ª° c·ª≠a s·ªï hay video feed thay ƒë·ªïi t·ªâ l·ªá
    window.addEventListener("resize", syncCanvasSize);
    // M·ªôt s·ªë thi·∫øt b·ªã c·∫≠p nh·∫≠t ƒë·ªô ph√¢n gi·∫£i sau v√†i frame
    setTimeout(syncCanvasSize, 300);

    // G·ª£i √Ω tr·∫°ng th√°i
    showInfo("üì∑ ƒê∆∞a khu√¥n m·∫∑t v√†o khung ƒë·ªÉ ƒëƒÉng k√Ω‚Ä¶");

    // D√≤ m·∫∑t theo chu k·ª≥ (nh·∫π t√†i nguy√™n h∆°n rAF + ƒë·ªß cho ƒëƒÉng k√Ω)
    detectTimer = setInterval(async () => {
        if (hasRegistered || isDetecting) return;
        isDetecting = true;

        try {
            const detection = await faceapi
                .detectSingleFace(
                    video,
                    new faceapi.TinyFaceDetectorOptions({ inputSize: 320, scoreThreshold: 0.5 })
                )
                .withFaceLandmarks()
                .withFaceDescriptor();

            const ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (detection) {
                // V·∫Ω duy nh·∫•t 1 v√≤ng tr√≤n quanh khu√¥n m·∫∑t
                drawCircle(detection.detection.box);

                // Ch·ªët & g·ª≠i ƒëƒÉng k√Ω m·ªôt l·∫ßn
                hasRegistered = true;
                showInfo("üì§ ƒêang l∆∞u khu√¥n m·∫∑t‚Ä¶");

                const descriptor = Array.from(detection.descriptor);
                await submitDescriptor(descriptor);
            }
        } catch (err) {
            console.error("L·ªói detect:", err);
            // Kh√¥ng ƒë·ªïi tr·∫°ng th√°i hasRegistered ƒë·ªÉ c√≥ th·ªÉ th·ª≠ l·∫°i
        } finally {
            isDetecting = false;
        }
    }, 700);

    // Cleanup khi r·ªùi trang
    window.addEventListener("beforeunload", cleanup, { once: true });
}

// G·ª≠i descriptor l√™n server
async function submitDescriptor(descriptor) {
    try {
        const res = await fetch("/api/register-descriptor", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, descriptor }),
        });

        // C·ªë g·∫Øng parse JSON (server c√≥ th·ªÉ tr·∫£ v·ªÅ JSON {message:...})
        let data = {};
        try {
            data = await res.json();
        } catch (_) {
            // ignore n·∫øu kh√¥ng ph·∫£i JSON
        }

        if (res.ok) {
            showSuccess("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn trang‚Ä¶");
            cleanup();
            setTimeout(() => {
                window.location.href = "/acvstore/verify-face";
            }, 1500);
            return;
        }

        // Kh√¥ng ok ‚Üí hi·ªÉn th·ªã message server (v√≠ d·ª• 409)
        const msg =
            (data && data.message) ||
            (res.status === 409
                ? "‚ùå Khu√¥n m·∫∑t n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω cho m·ªôt t√†i kho·∫£n kh√°c."
                : "‚ùå Kh√¥ng th·ªÉ l∆∞u khu√¥n m·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.");
        showError(msg);

        // Cho ph√©p th·ª≠ l·∫°i (tr·ª´ khi b·∫°n mu·ªën ch·∫∑n h·∫≥n khi 409)
        hasRegistered = false;
    } catch (err) {
        console.error("L·ªói submit descriptor:", err);
        showError("‚ùå Kh√¥ng th·ªÉ l∆∞u khu√¥n m·∫∑t. Ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.");
        hasRegistered = false;
    }
}

// D·ªçn d·∫πp interval + camera
function cleanup() {
    if (detectTimer) {
        clearInterval(detectTimer);
        detectTimer = null;
    }
    stopVideoStream();
}

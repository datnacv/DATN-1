document.addEventListener("DOMContentLoaded", async () => {
    // --- Khai b√°o c√°c ph·∫ßn t·ª≠ DOM v√† h·∫±ng s·ªë ---
    const video = document.getElementById("video");
    const resultDiv = document.getElementById("result");
    const canvas = document.getElementById("overlay");
    const statusIndicator = document.getElementById("status-indicator");
    const displaySize = { width: 600, height: 450 }; // K√≠ch th∆∞·ªõc video g·ªëc cho vi·ªác t·∫£i model v√† stream
    const username = document.body.getAttribute("data-username"); // L·∫•y username t·ª´ thu·ªôc t√≠nh data c·ªßa body
    const requiredMatches = 10; // S·ªë l·∫ßn kh·ªõp li√™n ti·∫øp c·∫ßn thi·∫øt ƒë·ªÉ x√°c minh th√†nh c√¥ng
    const detectionInterval = 150; // Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ph√°t hi·ªán (ms), ~6-7 FPS
    let lastDetectionTime = 0; // Bi·∫øn theo d√µi th·ªùi gian c·ªßa l·∫ßn ph√°t hi·ªán cu·ªëi c√πng

    let faceMatcher = null; // Bi·∫øn l∆∞u tr·ªØ FaceMatcher sau khi t·∫£i descriptor

    console.log("üöÄ B·∫Øt ƒë·∫ßu x√°c minh khu√¥n m·∫∑t cho:", username);

    // --- H√†m ti·ªán √≠ch: C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã ---
    const updateStatus = (message, type = 'info') => {
        let icon = '';
        let color = '#cccccc'; // M√†u x√°m m·∫∑c ƒë·ªãnh

        switch (type) {
            case 'loading':
                icon = '<i class="fas fa-sync-alt fa-spin"></i>';
                color = '#3498db'; // Xanh d∆∞∆°ng
                break;
            case 'success':
                icon = '<i class="fas fa-check-circle"></i>';
                color = '#2ecc71'; // Xanh l√°
                break;
            case 'error':
                icon = '<i class="fas fa-exclamation-circle"></i>';
                color = '#e74c3c'; // ƒê·ªè
                break;
            case 'warning':
                icon = '<i class="fas fa-exclamation-triangle"></i>';
                color = '#f39c12'; // Cam
                break;
            case 'info':
            default:
                icon = '<i class="fas fa-info-circle"></i>';
                color = '#cccccc'; // X√°m
                break;
        }
        statusIndicator.style.backgroundColor = color;
        resultDiv.innerHTML = `${icon} ${message}`;
    };

    // --- H√†m ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc Canvas ƒë·ªÉ responsive ---
    const adjustCanvasSize = () => {
        const videoWrapper = video.parentElement;
        canvas.width = videoWrapper.clientWidth;
        canvas.height = videoWrapper.clientHeight;
        // ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc kh·ªõp v·ªõi video ƒë·ªÉ v·∫Ω ch√≠nh x√°c
        faceapi.matchDimensions(canvas, { width: videoWrapper.clientWidth, height: videoWrapper.clientHeight });
    };

    // --- H√†m t·∫£i c√°c m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t ---
    const loadFaceModels = async () => {
        updateStatus("ƒêang t·∫£i c√°c m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t...", 'loading');
        try {
            await Promise.all([
                faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
                faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
                faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
            ]);
            console.log("‚úÖ C√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i m√¥ h√¨nh:", error);
            throw new Error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
        }
    };

    // --- H√†m kh·ªüi ƒë·ªông camera ---
    const startCamera = async () => {
        updateStatus("ƒêang m·ªü camera c·ªßa b·∫°n...", 'loading');
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: displaySize.width,
                    height: displaySize.height
                }
            });
            video.srcObject = stream;
            // Tr·∫£ v·ªÅ m·ªôt Promise ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë√£ s·∫µn s√†ng ph√°t
            return new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    adjustCanvasSize(); // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc canvas sau khi video t·∫£i metadata
                    resolve(true);
                };
            });
        } catch (error) {
            console.error("‚ùå L·ªói khi truy c·∫≠p camera:", error);
            if (error.name === "NotAllowedError") {
                throw new Error("B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t tr√¨nh duy·ªát.");
            } else if (error.name === "NotFoundError") {
                throw new Error("Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng ƒë·∫£m b·∫£o camera ƒë∆∞·ª£c k·∫øt n·ªëi v√† ho·∫°t ƒë·ªông.");
            } else {
                throw new Error(`L·ªói camera: ${error.message}.`);
            }
        }
    };

    // --- H√†m l·∫•y d·ªØ li·ªáu descriptor khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω t·ª´ backend ---
    const fetchUserDescriptors = async () => {
        updateStatus("ƒêang l·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω...", 'loading');
        try {
            // **L∆ØU √ù QUAN TR·ªåNG V·ªÄ B·∫¢O M·∫¨T:**
            // Trong d·ª± √°n th·ª±c t·∫ø, API n√†y PH·∫¢I ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng x√°c th·ª±c (v√≠ d·ª•: JWT, Session).
            // `username` KH√îNG N√äN ƒë∆∞·ª£c truy·ªÅn tr·ª±c ti·∫øp nh∆∞ m·ªôt query parameter m√† kh√¥ng c√≥ x√°c th·ª±c.
            // Ch·ªâ ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p M·ªöI ƒë∆∞·ª£c ph√©p l·∫•y descriptor c·ªßa ch√≠nh h·ªç.
            const res = await fetch(`/api/get-descriptor?username=${encodeURIComponent(username)}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    // Th√™m Authorization header n·∫øu b·∫°n d√πng JWT ho·∫∑c c√°c token kh√°c
                    // 'Authorization': `Bearer ${yourAuthToken}`
                },
                credentials: 'include' // Bao g·ªìm cookies/credentials n·∫øu d√πng session-based auth
            });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || `L·ªói t·ª´ server: ${res.status} ${res.statusText}`);
            }

            const data = await res.json();

            if (!data.descriptors || !Array.isArray(data.descriptors) || data.descriptors.length === 0) {
                throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω cho t√†i kho·∫£n n√†y. Vui l√≤ng ƒëƒÉng k√Ω khu√¥n m·∫∑t tr∆∞·ªõc.");
            }

            // Chuy·ªÉn ƒë·ªïi m·∫£ng c√°c s·ªë th√†nh Float32Array
            return new faceapi.LabeledFaceDescriptors(
                username,
                data.descriptors.map(d => new Float32Array(d))
            );
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t:", error);
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω: ${error.message}.`);
        }
    };

    // --- H√†m ch√≠nh: V√≤ng l·∫∑p ph√°t hi·ªán v√† so kh·ªõp khu√¥n m·∫∑t ---
    const runDetectionLoop = () => {
        let consecutiveMatches = 0; // ƒê·∫øm s·ªë khung h√¨nh kh·ªõp li√™n ti·∫øp
        const ctx = canvas.getContext("2d"); // L·∫•y context 2D c·ªßa canvas

        const detect = async () => {
            // Gi·ªõi h·∫°n t·∫ßn su·∫•t x·ª≠ l√Ω ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
            const currentTime = performance.now();
            if (currentTime - lastDetectionTime < detectionInterval) {
                requestAnimationFrame(detect);
                return;
            }
            lastDetectionTime = currentTime;

            // Ph√°t hi·ªán t·∫•t c·∫£ khu√¥n m·∫∑t trong video
            const detections = await faceapi
                .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                .withFaceLandmarks()
                .withFaceDescriptors();

            // Resize k·∫øt qu·∫£ ph√°t hi·ªán ƒë·ªÉ ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc canvas hi·ªán t·∫°i
            const resized = faceapi.resizeResults(detections, { width: canvas.width, height: canvas.height });
            ctx.clearRect(0, 0, canvas.width, canvas.height); // X√≥a canvas tr∆∞·ªõc khi v·∫Ω khung m·ªõi

            if (resized.length === 0) {
                updateStatus("Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng nh√¨n v√†o camera.", 'warning');
                consecutiveMatches = 0; // Reset s·ªë l·∫ßn kh·ªõp n·∫øu kh√¥ng c√≥ khu√¥n m·∫∑t
                requestAnimationFrame(detect);
                return;
            }

            let currentFrameMatched = false; // Bi·∫øn c·ªù cho bi·∫øt khu√¥n m·∫∑t c√≥ kh·ªõp trong khung h√¨nh hi·ªán t·∫°i kh√¥ng
            let bestMatchDistance = Infinity; // Kho·∫£ng c√°ch nh·ªè nh·∫•t c·ªßa khu√¥n m·∫∑t kh·ªõp trong khung h√¨nh

            // Duy·ªát qua t·ª´ng khu√¥n m·∫∑t ƒë∆∞·ª£c ph√°t hi·ªán
            resized.forEach((detection) => {
                const result = faceMatcher.findBestMatch(detection.descriptor); // T√¨m khu√¥n m·∫∑t kh·ªõp nh·∫•t
                const box = detection.detection.box; // L·∫•y bounding box c·ªßa khu√¥n m·∫∑t

                // Ki·ªÉm tra xem khu√¥n m·∫∑t c√≥ kh·ªõp v·ªõi username v√† kho·∫£ng c√°ch c√≥ ƒë·ªß g·∫ßn kh√¥ng
                // Ng∆∞·ª°ng 0.45 l√† m·ªôt gi√° tr·ªã ph·ªï bi·∫øn, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
                const isMatch = result.label === username && result.distance < 0.45;

                ctx.beginPath();
                ctx.lineWidth = 4;

                if (isMatch) {
                    currentFrameMatched = true;
                    bestMatchDistance = Math.min(bestMatchDistance, result.distance); // C·∫≠p nh·∫≠t kho·∫£ng c√°ch t·ªët nh·∫•t
                    ctx.strokeStyle = "rgba(0, 200, 83, 0.8)"; // M√†u xanh l√° cho khu√¥n m·∫∑t kh·ªõp
                    ctx.shadowColor = "rgba(0, 200, 83, 0.8)";
                    ctx.shadowBlur = 15;
                } else {
                    ctx.strokeStyle = "rgba(255, 69, 58, 0.6)"; // M√†u ƒë·ªè cam cho khu√¥n m·∫∑t kh√¥ng kh·ªõp
                    ctx.shadowColor = "rgba(255, 69, 58, 0.8)";
                    ctx.shadowBlur = 10;
                }

                // V·∫Ω h√¨nh elip ƒë·ªÉ t·∫°o khung cho khu√¥n m·∫∑t
                ctx.ellipse(
                    box.x + box.width / 2,
                    box.y + box.height / 2,
                    box.width / 2,
                    box.height / 2,
                    0,
                    0,
                    2 * Math.PI
                );
                ctx.stroke();
                ctx.shadowBlur = 0; // T·∫Øt shadow sau khi v·∫Ω khung
                ctx.shadowColor = "transparent";
            });

            // C·∫≠p nh·∫≠t s·ªë l·∫ßn kh·ªõp li√™n ti·∫øp v√† tr·∫°ng th√°i
            if (currentFrameMatched) {
                consecutiveMatches++;
                updateStatus(`ƒê√£ kh·ªõp khu√¥n m·∫∑t (${consecutiveMatches}/${requiredMatches}). Kho·∫£ng c√°ch: ${bestMatchDistance.toFixed(2)}`, 'success');
            } else {
                consecutiveMatches = 0;
                updateStatus("Khu√¥n m·∫∑t kh√¥ng kh·ªõp ho·∫∑c kh√¥ng h·ª£p l·ªá. ƒêang ch·ªù khu√¥n m·∫∑t h·ª£p l·ªá...", 'warning');
            }

            // N·∫øu ƒë·∫°t ƒë·ªß s·ªë l·∫ßn kh·ªõp li√™n ti·∫øp
            if (consecutiveMatches >= requiredMatches) {
                updateStatus("X√°c minh th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...", 'success');
                // D·ª´ng stream camera ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n v√† b·∫£o m·∫≠t
                if (video.srcObject) {
                    video.srcObject.getTracks().forEach(track => track.stop());
                }

                // G·ª≠i th√¥ng b√°o x√°c minh th√†nh c√¥ng v·ªÅ backend
                try {
                    // **L∆ØU √ù QUAN TR·ªåNG V·ªÄ B·∫¢O M·∫¨T:**
                    // API n√†y c≈©ng PH·∫¢I ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng x√°c th·ª±c (JWT/Session) ƒë·ªÉ ngƒÉn ch·∫∑n
                    // k·∫ª t·∫•n c√¥ng gi·∫£ m·∫°o y√™u c·∫ßu x√°c minh th√†nh c√¥ng.
                    const response = await fetch("/acvstore/verify-success", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ username }),
                        credentials: "include" // Bao g·ªìm cookies/credentials
                    });
                    const data = await response.json();

                    if (data.success) {
                        setTimeout(() => {
                            window.location.href = "/acvstore/thong-ke"; // Chuy·ªÉn h∆∞·ªõng sau 1.5 gi√¢y
                        }, 1500);
                    } else {
                        // N·∫øu backend b√°o l·ªói, hi·ªÉn th·ªã l·ªói v√† cho ph√©p th·ª≠ l·∫°i
                        updateStatus(`X√°c minh th·∫•t b·∫°i: ${data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi ghi nh·∫≠n th√†nh c√¥ng."}`, 'error');
                        consecutiveMatches = 0; // Reset ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·ª≠ l·∫°i
                        requestAnimationFrame(detect); // Ti·∫øp t·ª•c v√≤ng l·∫∑p
                    }
                } catch (err) {
                    console.error("L·ªói khi g·ª≠i x√°c minh th√†nh c√¥ng v·ªÅ backend:", err);
                    updateStatus("L·ªói k·∫øt n·ªëi: Kh√¥ng th·ªÉ g·ª≠i x√°c minh th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.", 'error');
                    consecutiveMatches = 0; // Reset ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·ª≠ l·∫°i
                    requestAnimationFrame(detect); // Ti·∫øp t·ª•c v√≤ng l·∫∑p
                }
                return; // Ng·ª´ng v√≤ng l·∫∑p ph√°t hi·ªán n·∫øu ƒë√£ x√°c minh th√†nh c√¥ng
            }

            requestAnimationFrame(detect); // Ti·∫øp t·ª•c v√≤ng l·∫∑p ph√°t hi·ªán
        };

        detect(); // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ph√°t hi·ªán
    };

    // --- Logic kh·ªüi t·∫°o ch√≠nh c·ªßa ·ª©ng d·ª•ng ---
    const initializeFaceVerification = async () => {
        try {
            await loadFaceModels(); // 1. T·∫£i c√°c m√¥ h√¨nh Face-API
            await startCamera();    // 2. Kh·ªüi ƒë·ªông camera v√† ch·ªù video s·∫µn s√†ng

            // Ch·ªâ ch·∫°y c√°c b∆∞·ªõc sau khi video ƒë√£ b·∫Øt ƒë·∫ßu ph√°t
            video.addEventListener("play", async () => {
                try {
                    const labeledDescriptor = await fetchUserDescriptors(); // 3. L·∫•y descriptor khu√¥n m·∫∑t
                    faceMatcher = new faceapi.FaceMatcher([labeledDescriptor], 0.45); // 4. Kh·ªüi t·∫°o FaceMatcher
                    runDetectionLoop(); // 5. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p nh·∫≠n di·ªán v√† so kh·ªõp
                } catch (error) {
                    console.error("‚ùå L·ªói trong qu√° tr√¨nh sau khi camera kh·ªüi ƒë·ªông:", error);
                    updateStatus(`Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu x√°c minh: ${error.message}`, 'error');
                    // D·ª´ng camera n·∫øu c√≥ l·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o sau khi camera b·∫≠t
                    if (video.srcObject) {
                        video.srcObject.getTracks().forEach(track => track.stop());
                    }
                }
            }, { once: true }); // ƒê·∫£m b·∫£o event listener n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn

        } catch (error) {
            // X·ª≠ l√Ω l·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o ban ƒë·∫ßu (t·∫£i model ho·∫∑c b·∫≠t camera)
            console.error("‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng:", error);
            updateStatus(`L·ªói nghi√™m tr·ªçng: ${error.message}. Vui l√≤ng t·∫£i l·∫°i trang.`, 'error');
            // D·ª´ng camera n·∫øu c√≥ l·ªói ngay khi kh·ªüi t·∫°o
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }
        }
    };

    // --- B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√°c minh khi DOM ƒë√£ t·∫£i ---
    initializeFaceVerification();

    // --- ƒê·∫£m b·∫£o canvas responsive khi c·ª≠a s·ªï thay ƒë·ªïi k√≠ch th∆∞·ªõc ---
    window.addEventListener('resize', adjustCanvasSize);
});
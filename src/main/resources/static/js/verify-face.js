document.addEventListener("DOMContentLoaded", async () => {
    const video = document.getElementById("video");
    const resultDiv = document.getElementById("result");
    const username = "admin";

    console.log("üöÄ Starting face verification for:", username);

    try {
        // Load face-api models
        resultDiv.textContent = "ƒêang t·∫£i models...";
        await Promise.all([
            faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
            faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
            faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
        ]);
        console.log("‚úÖ ƒê√£ load xong models");

        // Start camera
        resultDiv.textContent = "ƒêang kh·ªüi ƒë·ªông camera...";
        const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
        video.srcObject = stream;
        console.log("‚úÖ Camera started successfully");

    } catch (e) {
        console.error("‚ùå L·ªói khi load models ho·∫∑c camera:", e);
        resultDiv.textContent = "L·ªói: " + e.message;
        return;
    }

    video.addEventListener("play", async () => {
        console.log("üìπ Video started playing");

        // Create overlay canvas
        const canvas = document.getElementById("overlay");
        const displaySize = { width: 600, height: 450 };
        faceapi.matchDimensions(canvas, displaySize);

        try {
            // Load user's face descriptor
            resultDiv.textContent = "ƒêang t·∫£i d·ªØ li·ªáu khu√¥n m·∫∑t...";
            console.log("üì° Fetching descriptor for:", username);

            const descriptorResponse = await fetch(`/api/get-descriptor?username=${encodeURIComponent(username)}`);
            console.log("üìä Response status for get-descriptor:", descriptorResponse.status);

            if (!descriptorResponse.ok) {
                const errorData = await descriptorResponse.json().catch(() => ({}));
                throw new Error(`Server error: ${descriptorResponse.status} - ${errorData.message || 'Unknown error'}`);
            }

            const descriptorData = await descriptorResponse.json();
            console.log("‚úÖ Descriptor loaded:", descriptorData);

            // Validate descriptor data
            if (!descriptorData.descriptors || !Array.isArray(descriptorData.descriptors) || descriptorData.descriptors.length === 0) {
                throw new Error("Invalid descriptor data format");
            }

            // Create labeled face descriptors
            const labeledDescriptors = new faceapi.LabeledFaceDescriptors(
                username,
                descriptorData.descriptors.map(d => new Float32Array(d))
            );

            const faceMatcher = new faceapi.FaceMatcher([labeledDescriptors], 0.6);
            console.log("‚úÖ Face matcher created");

            resultDiv.textContent = "ƒêang nh·∫≠n di·ªán khu√¥n m·∫∑t...";
            let verificationAttempts = 0;
            const maxAttempts = 3;
            let consecutiveMatches = 0;

            // Start face detection loop
            const detectionInterval = setInterval(async () => {
                try {
                    const detections = await faceapi
                        .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                        .withFaceLandmarks()
                        .withFaceDescriptors();

                    const resizedDetections = faceapi.resizeResults(detections, displaySize);

                    // Clear canvas
                    const ctx = canvas.getContext("2d");
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    if (detections.length === 0) {
                        resultDiv.textContent = "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng ƒë·ªëi m·∫∑t v·ªõi camera.";
                        consecutiveMatches = 0;
                        return;
                    }

                    const results = resizedDetections.map(d =>
                        faceMatcher.findBestMatch(d.descriptor)
                    );

                    let foundMatch = false;
                    results.forEach((result, i) => {
                        const box = resizedDetections[i].detection.box;
                        const isMatch = result.label === username && result.distance < 0.6;

                        // Draw box with color based on match
                        const color = isMatch ? '#00ff00' : '#ff0000';
                        const drawBox = new faceapi.draw.DrawBox(box, {
                            label: `${result.label} (${result.distance.toFixed(2)})`,
                            boxColor: color
                        });
                        drawBox.draw(canvas);

                        if (isMatch) {
                            foundMatch = true;
                            consecutiveMatches++;
                            console.log(`‚úÖ Khu√¥n m·∫∑t kh·ªõp (${consecutiveMatches}/3): ${result.label}, distance: ${result.distance.toFixed(3)}`);
                            resultDiv.textContent = `ƒê√£ nh·∫≠n di·ªán: ${result.label} (${consecutiveMatches}/3)`;

                            // Need 3 consecutive matches for security
                            if (consecutiveMatches >= 3) {
                                clearInterval(detectionInterval);
                                resultDiv.textContent = "‚úÖ X√°c minh th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...";

                                // Send verification success
                                fetch("/acvstore/employees/verify-success", {
                                    method: "POST"
                                })
                                    .then(res => res.json())
                                    .then(data => {
                                        if (data.success) {
                                            setTimeout(() => {
                                                window.location.href = "/acvstore/thong-ke";
                                            }, 1000);
                                        } else {
                                            resultDiv.textContent = "L·ªói x√°c minh. Vui l√≤ng th·ª≠ l·∫°i.";
                                        }
                                    })
                                    .catch(err => {
                                        console.error("‚ùå L·ªói g·ª≠i x√°c minh:", err);
                                        resultDiv.textContent = "L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.";
                                    });
                            }
                        }
                    });

                    if (!foundMatch) {
                        consecutiveMatches = 0;
                        verificationAttempts++;
                        resultDiv.textContent = `Khu√¥n m·∫∑t kh√¥ng kh·ªõp. Th·ª≠ l·∫°i... (${verificationAttempts}/${maxAttempts})`;

                        if (verificationAttempts >= maxAttempts) {
                            clearInterval(detectionInterval);
                            resultDiv.textContent = "‚ùå X√°c minh th·∫•t b·∫°i. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
                        }
                    }

                } catch (detectionError) {
                    console.error("‚ùå L·ªói trong qu√° tr√¨nh nh·∫≠n di·ªán:", detectionError);
                }
            }, 1000);

        } catch (error) {
            console.error("‚ùå L·ªói t·∫£i descriptor:", error);
            resultDiv.textContent = `L·ªói: ${error.message}`;
        }
    });
});
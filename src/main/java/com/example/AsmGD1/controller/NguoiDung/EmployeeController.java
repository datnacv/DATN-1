package com.example.AsmGD1.controller.NguoiDung;

import com.example.AsmGD1.entity.NguoiDung;
import com.example.AsmGD1.service.NguoiDung.NguoiDungService;
import com.example.AsmGD1.service.ThongBao.ThongBaoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.UUID;

@Controller
@RequestMapping("/acvstore/employees")
public class EmployeeController {

    @Autowired
    private NguoiDungService nguoiDungService;
    @Autowired
    private ThongBaoService thongBaoService;

    @GetMapping
    public String listEmployees(@RequestParam(defaultValue = "0") int page,
                                @RequestParam(defaultValue = "") String keyword,
                                @RequestParam(defaultValue = "") String vaiTro,
                                Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        NguoiDung currentUser = auth != null && auth.getPrincipal() instanceof NguoiDung ? (NguoiDung) auth.getPrincipal() : null;
        boolean isAdmin = currentUser != null && "ADMIN".equalsIgnoreCase(currentUser.getVaiTro());

        Page<NguoiDung> employees;
        if (vaiTro.isEmpty()) {
            employees = nguoiDungService.findUsersByVaiTroNotCustomer(keyword, page, 5);
        } else {
            employees = nguoiDungService.findUsersByVaiTro(vaiTro, keyword, page, 5);
        }

        model.addAttribute("employees", employees.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", employees.getTotalPages());
        model.addAttribute("pageSize", employees.getSize()); // ‚úÖ Th√™m d√≤ng n√†y
        model.addAttribute("keyword", keyword);
        model.addAttribute("vaiTro", vaiTro);
        model.addAttribute("employee", new NguoiDung());
        model.addAttribute("isAdmin", isAdmin);
        model.addAttribute("currentUser", currentUser);

        return "WebQuanLy/list-nhan-vien";
    }


    @PostMapping("/add")
    public String addEmployee(@ModelAttribute("employee") NguoiDung employee, RedirectAttributes redirectAttributes, Authentication authentication) {
        try {
            NguoiDung currentUser = (NguoiDung) authentication.getPrincipal();

            if (!"ADMIN".equalsIgnoreCase(currentUser.getVaiTro())) {
                redirectAttributes.addFlashAttribute("message", "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n!");
                redirectAttributes.addFlashAttribute("messageType", "danger");
                return "redirect:/acvstore/employees";
            }

            if (employee.getTrangThai() == null) {
                employee.setTrangThai(true);
            }

            // üí° L·∫•y th√¥ng tin c·∫ßn thi·∫øt NGAY tr∆∞·ªõc khi session b·ªã detach
            String hoTenNguoiThem = currentUser.getHoTen();
            String hoTenNhanVienMoi = employee.getHoTen();

            nguoiDungService.save(employee);

            thongBaoService.taoThongBaoHeThong(
                    "admin",
                    "Th√™m nh√¢n vi√™n",
                    "Nh√¢n vi√™n " + hoTenNhanVienMoi + " ƒë√£ ƒë∆∞·ª£c th√™m b·ªüi " + hoTenNguoiThem
            );

            redirectAttributes.addFlashAttribute("message", "Th√™m nh√¢n vi√™n th√†nh c√¥ng!");
            redirectAttributes.addFlashAttribute("messageType", "success");

        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message", "Th√™m nh√¢n vi√™n th·∫•t b·∫°i: " + e.getMessage());
            redirectAttributes.addFlashAttribute("messageType", "danger");
        }
        return "redirect:/acvstore/employees";
    }


    @PostMapping("/edit")
    public String editEmployee(@ModelAttribute("employee") NguoiDung employee, RedirectAttributes redirectAttributes, Authentication authentication) {
        try {
            NguoiDung currentUser = (NguoiDung) authentication.getPrincipal();

            if (!"ADMIN".equalsIgnoreCase(currentUser.getVaiTro())) {
                redirectAttributes.addFlashAttribute("message", "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a nh√¢n vi√™n!");
                redirectAttributes.addFlashAttribute("messageType", "danger");
                return "redirect:/acvstore/employees";
            }

            if (employee.getTrangThai() == null) {
                employee.setTrangThai(true);
            }

            nguoiDungService.save(employee);

            thongBaoService.taoThongBaoHeThong(
                    "admin",
                    "C·∫≠p nh·∫≠t nh√¢n vi√™n",
                    "Th√¥ng tin nh√¢n vi√™n **" + employee.getHoTen() + "** ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi **" + currentUser.getHoTen() + "**"
            );

            redirectAttributes.addFlashAttribute("message", "S·ª≠a nh√¢n vi√™n th√†nh c√¥ng!");
            redirectAttributes.addFlashAttribute("messageType", "success");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message", "S·ª≠a nh√¢n vi√™n th·∫•t b·∫°i: " + e.getMessage());
            redirectAttributes.addFlashAttribute("messageType", "danger");
        }
        return "redirect:/acvstore/employees";
    }


    @PostMapping("/delete/{id}")
    public String deleteEmployee(@PathVariable UUID id, RedirectAttributes redirectAttributes, Authentication authentication) {
        try {
            NguoiDung currentUser = (NguoiDung) authentication.getPrincipal();

            if (!"ADMIN".equalsIgnoreCase(currentUser.getVaiTro())) {
                redirectAttributes.addFlashAttribute("message", "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a nh√¢n vi√™n!");
                redirectAttributes.addFlashAttribute("messageType", "danger");
                return "redirect:/acvstore/employees";
            }

            NguoiDung deletedUser = nguoiDungService.findById(id);
            nguoiDungService.deleteById(id);

            thongBaoService.taoThongBaoHeThong(
                    "admin",
                    "X√≥a nh√¢n vi√™n",
                    "Nh√¢n vi√™n **" + deletedUser.getHoTen() + "** ƒë√£ b·ªã x√≥a b·ªüi **" + currentUser.getHoTen() + "**"
            );

            redirectAttributes.addFlashAttribute("message", "X√≥a nh√¢n vi√™n th√†nh c√¥ng!");
            redirectAttributes.addFlashAttribute("messageType", "success");

        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message", "X√≥a nh√¢n vi√™n th·∫•t b·∫°i: " + e.getMessage());
            redirectAttributes.addFlashAttribute("messageType", "danger");
        }
        return "redirect:/acvstore/employees";
    }


    @GetMapping("/employee-dashboard")
    public String showEmployeeDashboard(Model model, Authentication authentication) {
        NguoiDung currentUser = (NguoiDung) authentication.getPrincipal();
        model.addAttribute("message", "Ch√†o m·ª´ng Nh√¢n vi√™n ƒë·∫øn v·ªõi dashboard!");
        model.addAttribute("messageType", "success");
        model.addAttribute("user", currentUser);
        return "WebQuanLy/employee-dashboard";
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "WebQuanLy/employee-login";
    }

    // Ph·∫ßn verify-face c√≥ th·ªÉ t·∫°m th·ªùi b·ªè qua n·∫øu ch∆∞a s·ª≠ d·ª•ng
}